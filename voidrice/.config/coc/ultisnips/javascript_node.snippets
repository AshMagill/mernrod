snippet node-http-quark "a micro HTTP framework, creates an app with a route"
const quark = require('quarkhttp');
const app = quark();
app.get('/', (req, res) => res.send('hello world'))
app.listen(3000, () => {
  console.log('Server running on 3000');
})
endsnippet

snippet node-http-quark-get "a micro HTTP framework, adds a GET route"
app.get('/products', (req, res) => res.json([{ id: 1, name: 'a product' }]))
endsnippet

snippet node-http-quark-post "a micro HTTP framework, adds a POST route"
app.post('/products', (req,res) => {
  console.info('body', req.body)
  res.json(req.body);
})
endsnippet

snippet node-http-quark-put "a micro HTTP framework, adds a PUT route"
app.put('/products', (req,res) => {
  console.info('body', req.body)
  res.json(req.body);
})
endsnippet

snippet node-http-quark-middleware "a micro HTTP framework, adds a middleware"
app.get('/orders', (req, res, next) => {
  if (req.headers['authorization'] === 'abc123') {
    next()
  } else {
    res.statusCode = 401;
    res.send('Not allowed')
  }
}, (req, res) => {
  res.send('Protected route');
})
endsnippet

snippet node-jest-suite
describe('$1', () => {
  
})
endsnippet

snippet node-jest-test
test('$1', () => {$2})
endsnippet

snippet node-jest-test-expect
test('$2', () => {
  expect(1).toBe(2)
})
endsnippet

snippet node-jest-expect
 expect(1).toBe(2)
endsnippet

snippet node-jest-expect-to-equal
let obj = { a: '1' }
expect(obj).toEqual({ a: '1' })
endsnippet

snippet node-jest-test-expect-to-equal
test('$2', () => {
  let obj = { a: '1' }
  expect(obj).toEqual({ a: '1' })
})
endsnippet

snippet node-jest-expect-to-throw
const thisThrows = () => throw new Error('error message')
expect(thisThrows).toThrow('error message')
endsnippet

snippet node-jest-test-expect-to-throw
test('$2', () => {
  const thisThrows = () => throw new Error('error message')
  expect(thisThrows).toThrow('error message')
})
endsnippet

snippet node-jest-test-beforeAll
  beforeAll(() => {
    
  })
endsnippet

snippet node-jest-test-afterAll
  afterAll(() => {
    
  })
endsnippet

snippet node-regex-test-digits "test if string contains digits, returns true/false"
const isMatch = /\d+/.test('abc123')
endsnippet

snippet node-regex-test-word "test if string contains a word boundary, returns true/false"
const isMatch = /\w+/.test('abc123')
endsnippet

snippet node-regex-match "matches a file extension"
const [, extension] = 'file.txt'.match(/\.(\w+)/)
endsnippet

snippet node-regex-match-named-group "matches a file extension, "
const { groups: { extension } } = 'file.txt'.match(/\.(?<extension>\w+)/)
endsnippet

snippet node-express "Creates an express server"
const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => res.send('Hello World!'))
app.listen(port, () => console.log(`Example app listening on port ${port}!`))
endsnippet

snippet node-express-get "Creates a GET route"
app.get('/', (req, res) => {
  res.send('GET request to the homepage')
})
endsnippet

snippet node-express-get-params "Creates a GET route and shows how to access params"
app.get('/books/:bookId', (req, res) => {
  res.send(req.params.bookId)
})
endsnippet

snippet node-express-post "Creates a POST route"
app.post('/', function (req, res) {
  res.send('POST request to the homepage')
})
endsnippet

snippet node-express-post-params "Creates a POST route that can read from the body"
var bodyParser = require('body-parser');
app.use(bodyParser.json());

app.post('/update', function(req, res) {
  const { name, description } = req.body;
  res.send(`Name ${name}, desc ${description}`);
});
endsnippet

snippet node-express-put-params "Creates a POST route that can read from the body"
var bodyParser = require('body-parser');
app.use(bodyParser.json());

app.put('/products', function(req, res) {
  const { id, name, description } = req.body;
  res.send(`Name ${id} ${name}, desc ${description}`);
});
endsnippet

snippet node-express-delete-params "Creates a POST route that can read from the body"
var bodyParser = require('body-parser');
app.use(bodyParser.json());

app.delete('/products/:id', function(req, res) {
  const { id } = req.params;
  res.send(`Delete record with id ${id}`);
});
endsnippet

snippet node-express-query-params "Creates a POST route that can read from the body"
var bodyParser = require('body-parser');
app.use(bodyParser.json());

// for routes looking like this `/products?page=1&pageSize=50`
app.get('/products', function(req, res) {
  const page = req.query.page;
  const pageSize = req.query.pageSize;
  res.send(`Filter with parameters ${page} and ${pageSize});`
});
endsnippet

snippet node-express-post-params-alt "Creates a POST route that can read from the body, works for 4.16 version of express and above"
app.use(express.json())
app.listen(8080)

app.post('/test', (req, res) => {
  res.json({ body: req.body })
});
endsnippet

snippet node-express-middleware-logger "Creates a middleware"
const logger = function (req, res, next) {
  console.log('logging')
  next()
}

app.use(logger)

app.get('/', (req, res) => {
  res.send('Hello World!')
})
endsnippet

snippet node-express-middleware-error "Creates a error middleware"
app.use(function (err, req, res, next) {
  console.error(err.stack)
  res.status(500).send('Something broke!')
});
endsnippet

snippet node-http-server "Creates a simple HTTP server"
var http = require('http');
http.createServer(function (request, response) {
  response.writeHead(200, {'Content-Type': 'text/plain'});
  response.end('Hello World');
}).listen(8081);

console.log('Server running at http://127.0.0.1:8081/');
endsnippet

snippet node-file-read-sync "Reads a file synchronously"
var fs = require('fs');
var data = fs.readFileSync('file.txt');
endsnippet

snippet node-file-read-async "Reads a file asynchronously"
var fs = require('fs');
fs.readFile('input.txt', function (err, data) {
  if (err) return console.error(err);
  console.log(data.toString());
});
endsnippet

snippet node-event-emitter "Event emitter, shows emitting event and subscribing to it"
var events = require('events');
var eventEmitter = new events.EventEmitter();
eventEmitter.emit('my_event');
eventEmitter.on('my_event', () => {
  console.log('data received successfully.');
});
endsnippet

snippet node-promise-create "creates a Promise by instantiating it"
new Promise((resolve, reject) => {
  let condition = false;
  if(condition) {
    resolve('data')
  } else {
    reject('error')
}
})
endsnippet

snippet node-promise-shorthand "uses the static resolve/reject, good for unit tests"
const promiseThatWillResolve = Promise.resolve('data');
const promiseThatWillReject = Promise.reject('error');
endsnippet

snippet node-promise-all "uses the static all(), allows us to have a list of Promises finish at the same time"
const getData = () => Promise.resolve('data');
const getMoreData = () => Promise.resolve('more data');

Promise.all(
  getData(),
  getMoreData()
).then(result => {
  const [data, moreData] = result;
})
endsnippet

snippet node-async-await "demonstrates async/await"
async function getData() {
  return Promise.resolve('data');
}

async function getMoreData(data) {
  return Promise.resolve(data + 'more data');
}

function getAll() {
  const data = await getData();
  const moreData = await getMoreData(data);
  return `All the data: ${data}, ${moreData}`;
}

getAll().then((all) => {
  console.log('all the data')
})
endsnippet

snippet node-express-schema-validation "showcases the lib Joi and how you can use it to validate incoming requests"
const Joi = require('joi');
const loginSchema = Joi.object().keys({
  username: Joi.string()
    .min(3),
    .max(10),
    .required(),
  password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/)
});

app.post('/login', function(req, res) {
  const valid = Joi.validate(req.body, loginSchema).error === null;
  if (!valid) {
    res.status(422).json({
      status: 'error'
      message: 'Invalid request data'
      data: req.body
    });
  } else {
    // happy days - login user
    res.send(`ok`);
  }
});
endsnippet

snippet node-supertest-init "Sets up supertest by importing supertest and the app you mean to test. Additionally starts the app"
const supertest = require('supertest')
const app = require('../app');
const server = app.listen(3000, () => {
  console.log('listening at port 3000')
})
let request;
endsnippet

snippet node-supertest-beforeall "Configures supertest to use the app, this is needed"
beforeAll(() => {
  request = supertest(app)
})
endsnippet

snippet node-supertest-aftereall "Ensures the web app closes down after the test run, this is needed"
afterAll(async(close) => {
  server.close(() => {
    close()
   console.log('server closed');
  })
})
endsnippet

snippet node-supertest-testget "An example of supertest testing a GET route"
test('testing a GET route', async () => {
  let products = [
  {
    id: 1,
    name: 'book'
  },
  {
    id: 2,
    name: 'book2'
  }
 ];

  const res = await request.get('/products');
  expect(res.status).toBe(200);
  expect(res.body).toEqual(products);
})
endsnippet

snippet node-supertest-testgetwithparam "An example of supertest testing a GET route with a route parameter"
test('testing a GET route with router param', async () => {
  let product = {
    id: 1,
    name: 'book'
  };
  const res = await request.get('/products/1');
  expect(res.status).toBe(200);
  expect(res.body).toEqual(product);
});
endsnippet

snippet node-supertest-testpost "An example of supertest testing a POST route with a payload"
test('testing a POST route with a payload', async () => {
  let product = {
    name: 'book3'
  };
  const res = await request
  .post('/products')
  .send(product);
  expect(res.status).toBe(200);
  expect(res.body).toEqual({ id: 3, ...product});

  const newRes = await request.get('/products');
  let products = [
  {
    id: 1,
    name: 'book'
  },
  {
    id: 2,
    name: 'book2'
  },
  {
    id: 3,
    name: 'book3',
  }
 ];
  expect(newRes.body).toEqual(products);
});
endsnippet

snippet async "An asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function." 
async function f() {
  try {
    let response = await fetch('/no-user-here');
    let user = await response.json();
  } catch(err) {
    // catches errors both in fetch and response.json
    alert(err);
  }
}
endsnippet

snippet tryc "The try statement allows you to define a block of code to be tested for errors while it is being executed. The catch statement allows you to define a block of code to be executed, if an error occurs in the try block"
try {
  await fetchUserData(userId)
} catch (e) {
  console.log('asynchronous error was caught!');
  handleError(e);
}
endsnippet
