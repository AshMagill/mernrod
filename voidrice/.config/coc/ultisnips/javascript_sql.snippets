snippet s-alter-add-after

ALTER TABLE `${1:table}` ADD COLUMN `${2:col_name}` ${3:INT}${4: NOT NULL} AFTER `${5:col_name}`;

endsnippet

snippet s-alter-add-first

ALTER TABLE `${1:table}` ADD COLUMN `${2:col_name}` ${3:INT}${4: NOT NULL} FIRST;

endsnippet

snippet s-alter-add

ALTER TABLE `${1:table}` ADD COLUMN `${2:col_name}` ${3:INT}${4: NOT NULL};

endsnippet

snippet s-alter-auto-increment

ALTER TABLE `${1:table}` AUTO_INCREMENT = ${2:1};

endsnippet

snippet s-alter-change

ALTER TABLE `${1:table}` CHANGE `${2:old_name}` `${3:new_name}` ${4:new_type}${5: NOT NULL};

endsnippet

snippet s-alter-db-charset

ALTER DATABASE `${1:table}` CHARACTER SET ${2:utf8} COLLATE ${3:utf8_unicode_ci};

endsnippet

snippet s-alter-drop

ALTER TABLE `${1:table}` DROP COLUMN `${2:col_name}`;

endsnippet

snippet s-alter-fk-drop

ALTER TABLE `$1`
DROP FOREIGN KEY `${2:fk_${3:the_table}_${4:far_table}}`;

endsnippet

snippet s-alter--fk

ALTER TABLE `$1`
ADD INDEX `fk_$1_$3_idx` (`$2` ASC),
ADD CONSTRAINT `fk_${1:the_table}_$3`
  FOREIGN KEY (`${2:foreign_key}`)
  REFERENCES `${3:far_table}` (`${4:far_key}`)
  ON DELETE NO ACTION
  ON UPDATE CASCADE

endsnippet

snippet s-alter-fk

ALTER TABLE `$1`
ADD CONSTRAINT `fk_${1:the_table}_$3`
  FOREIGN KEY (`${2:foreign_key}`)
  REFERENCES `${3:far_table}` (`${4:far_key}`)
  ON DELETE NO ACTION
  ON UPDATE CASCADE

endsnippet

snippet s-alter-idx-drop

ALTER TABLE `${1:table}` DROP INDEX `${3:index_name}`;

endsnippet

snippet s-alter-idx

ALTER TABLE `${1:table}` ADD ${2:INDEX} `${3:index_name}`(`${4:field}` ASC$5);

endsnippet

snippet s-alter-modify

ALTER TABLE `${1:table}` MODIFY `${2:field}` ${3:NEW-FIELD-TYPE}${4: NOT NULL} ${5:AFTER `${6:field}`};

endsnippet

snippet s-alter-sort

ALTER TABLE `${1:table}` ORDER BY `${2:field}`;

endsnippet

snippet s-alter-table-charset

ALTER TABLE `${1:table}` CHARACTER SET ${2:utf8} COLLATE ${3:utf8_unicode_ci};

endsnippet

snippet s-alter-table-rename

ALTER TABLE `${1:table}` RENAME TO `${2:new_name}`;

endsnippet

snippet s-alter-uk "(add unique key)"

ALTER TABLE `${1:table_name}` ADD UNIQUE `unique_${5:index_name}` (`${11:column_1}`${15:, `${18:column_2}`});

endsnippet

snippet s--case "(case ... end case;)"

CASE
	${1:-- Example:
	-- --------------------------------------------------------------------------
	-- WHEN `my_var` = 5 THEN SELECT 'case equals 5';
	--
	-- WHEN `my_var` > 5 THEN BEGIN
	--   SELECT 'case bigger than 5';
	-- END;
	--
	-- ELSE SELECT 'case default';
	-- --------------------------------------------------------------------------
	-- you can use snippets for create a case
	--   s-case-w  - When
	--   s-case-wb - When Block
	}${2:ELSE $0;}
END CASE;

endsnippet

snippet s-case "(case `var` ... end case;)"

CASE `${2:var_name}`
	${1:-- Example:
	-- --------------------------------------------------------------------------
	-- WHEN 'my_val' THEN SELECT 'case my_val';
	--
	-- WHEN 'my_val_2' THEN BEGIN
	--   SELECT 'case my_val_2';
	-- END;
	--
	-- ELSE SELECT 'case default';
	-- --------------------------------------------------------------------------
	-- you can use snippets for create a case
	--   s--case-w  - When
	--   s--case-wb - When Block
	}${3:ELSE $0;}
END CASE;

endsnippet

snippet s--case-wb "(when `...` = '...' begin ...)"

WHEN `${1:var_name}` ${2:=} '${3:value}' THEN BEGIN
  ${0:-- SELECT 'case $3'};
END;


endsnippet

snippet s-case-wb "(when '...' begin ...)"

WHEN '${1:value}' THEN BEGIN
  ${0:-- SELECT 'case $1'};
END;


endsnippet

snippet s--case-w "(when `...` = '...' then ...)"

WHEN `${1:var_name}` ${2:=} '${3:value}' THEN ${0:-- SELECT 'case $3'};

endsnippet

snippet s-case-w "(when '...' then ...)"

WHEN '${1:value}' THEN ${0:-- SELECT 'case $1'};

endsnippet

snippet s-cur "(cursor full)"

DECLARE `${5:var_1}` ${7:VARCHAR(255)};
DECLARE `${10:done}` INT DEFAULT 0;
DECLARE `${30:cur}` CURSOR FOR ${40:SELECT `User` FROM `mysql`.`user`};
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET `${10:done}` = 1;

OPEN `${30:cur}`;
REPEAT
  FETCH `${30:cur}` INTO `${5:var_1}`;
  IF NOT `${10:done}` THEN
  	${0:-- Your code ...
  	SELECT `${5:var_1}`;
  	}
  END IF;
UNTIL `${10:done}` END REPEAT;
CLOSE `${30:cur}`;

endsnippet

snippet s-dec-cur "(declare cursor)"

DECLARE `${1:cursor_name}` FOR ${0:-- SELECT ...};

endsnippet

snippet s--dec "(var with default)"

DECLARE `${1:var_name}` ${2:INT} DEFAULT '${3:value}';

endsnippet

snippet s-dec-h "(declare handler)"

DECLARE CONTINUE HANDLER FOR SQLSTATE '${1:02000}' ${2:SET `done` = 1};

endsnippet

snippet s--dec-s "(declare .. varchar .. default)"

DECLARE `${1:var_name}` VARCHAR(${2:255}) DEFAULT '${3:value}';

endsnippet

snippet s-dec-s "(declare ... varchar)"

DECLARE `${1:var_name}` VARCHAR(${2:255});

endsnippet

snippet s-dec "(declare ...)"

DECLARE `${1:var_name}` ${2:INT};

endsnippet

snippet s--if "(if ... else)"

IF `${1:var}` ${2:=} ${3:value} THEN
	${4:-- body}
ELSE

END IF;

endsnippet

snippet s-if "(if ...)"

IF `${1:var}` ${2:=} ${3:value} THEN
	${4:-- body}
END IF;

endsnippet

snippet s-loop "(loop ... end loop)"

`${1:label_name}`: LOOP
	SET `${10:var_name}` = `${10}` ${11:+} ${12:1};

	${0:-- Your code ...}

	IF `${10}` ${20:>=} ${22:10} THEN
		LEAVE `${1:label_name}`;
	END IF;
END LOOP `${1:label_name}`;

endsnippet

snippet s--repeat "(loop begin ...)"

REPEAT
	BEGIN
		${0:-- Your code ...}
	END;
UNTIL `${1:var_name}` ${2:>} ${3:10} END REPEAT;

endsnippet

snippet s-repeat "(loop ... until ...)"

REPEAT ${0:/* Your code ... */}; UNTIL `${1:var_name}` ${2:>} ${3:10} END REPEAT;

endsnippet

snippet s-db-drop

DROP DATABASE `${1:db_name}`;

endsnippet

snippet s-db

CREATE DATABASE `${1:db_name}` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;

endsnippet

snippet s-d

DELETE FROM `${1:table}`${2: WHERE `$3` = '$4'};

endsnippet

snippet s-func-drop

DROP FUNCTION IF EXISTS `${1:name}`;

endsnippet

snippet s-func-list

${1:SELECT `name`, `param_list`, `comment` FROM `mysql`.`proc` WHERE `db`=DATABASE() AND `type` = 'FUNCTION';}

endsnippet

snippet s--func

DROP FUNCTION IF EXISTS `${1:function_name}`;
CREATE FUNCTION `${1}`(`${2:arg_name}` ${3:INT}) RETURNS ${4:INT}
BEGIN
  $5
END;

endsnippet

snippet s-func

CREATE FUNCTION `${1:function_name}`(`${2:arg_name}` ${3:INT}) RETURNS ${4:INT}
BEGIN
  $5
END;

endsnippet

snippet s-ione

INSERT INTO `$1` SET
`${2:name}` = '${3:value}'${4:,
};

endsnippet

snippet s-ifrom

INSERT INTO `${1:table}` SELECT ${2:*} FROM ${3:`${4:database}`.}`${5:$1}`;

endsnippet

snippet s-i

INSERT INTO `$1`(`$2`) VALUES
($3)${4:,
};

endsnippet

snippet s-delim

DELIMITER ${1:$$}

$2

$1
DELIMITER ;

endsnippet

snippet s-utc

SELECT UNIX_TIMESTAMP(NOW());

endsnippet

snippet s-priv-add-all "(add all privileges)"

GRANT ALL PRIVILEGES ON *.* TO '${4:user_name}'@'${5:localhost}';

endsnippet

snippet s-priv-add "(add privileges)"

GRANT ${1:ALL} PRIVILEGES ON `${2:db_name}`.`${3:table_name}` TO '${4:user_name}'@'${5:localhost}';

endsnippet

snippet s-priv-drop-all "(remove all privileges)"

REVOKE ALL ON *.* FROM '${4:user_name}'@'${5:localhost}';

endsnippet

snippet s-priv-drop "(remove privileges)"

REVOKE ${1:ALL} ON `${2:db_name}`.`${3:table_name}` FROM '${4:user_name}'@'${5:localhost}';

endsnippet

snippet s-priv-list "(list privileges)"

SHOW GRANTS FOR '${1:user_name}'@'${2:localhost}'\G

endsnippet

snippet s-priv-refresh "(flush privileges)"

${0:FLUSH PRIVILEGES;}

endsnippet

snippet s-proc-drop

DROP PROCEDURE IF EXISTS `${1:name}`;

endsnippet

snippet s-proc-list

${1:SELECT `name`, `param_list`, `comment` FROM `mysql`.`proc` WHERE `db`=DATABASE() AND `type` = 'PROCEDURE';}

endsnippet

snippet s--proc

DROP PROCEDURE IF EXISTS `${1:procedure_name}`;
CREATE PROCEDURE `${1}`(
`${2:arg_name}` ${3:INT}${4:,}
) BEGIN
  $5
END;

endsnippet

snippet s-proc

CREATE PROCEDURE `${1:procedure_name}`(
`${2:arg_name}` ${3:INT}${4:,}
) BEGIN
  $5
END;

endsnippet

snippet s--and

AND ( `$1` ${2:=} '$3' ) 

endsnippet

snippet s-and

AND ( $1 ) 

endsnippet

snippet s-alias

`$1`.`$2` AS `$3`

endsnippet

snippet s--alias

, `$1`.`$2` AS `$3`

endsnippet

snippet s--

, `$1`.`$2`

endsnippet

snippet s-

`$1`.`$2`

endsnippet

snippet s-e

( `$1` ${2:=} '$3' ) 

endsnippet

snippet s-f

FROM `$1` AS `$2`

endsnippet

snippet s-g

GROUP BY `$1`

endsnippet

snippet s-h

HAVING ( `$1` ${2:=} '$3' ) 

endsnippet

snippet s-j

INNER JOIN `$1` AS `${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}` ON ( `${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}`.`${4:id}` = `$5`.`${6:id}` )

endsnippet

snippet s-jleft

LEFT JOIN `$1` AS `${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}` ON ( `${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}`.`${4:id}` = `$5`.`${6:id}` )

endsnippet

snippet s-jright

RIGHT JOIN `$1` AS `${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}` ON ( `${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}`.`${4:id}` = `$5`.`${6:id}` )

endsnippet

snippet s-l

LIMIT ${1:0}, ${3:count}

endsnippet

snippet s--or

OR ( `$1` ${2:=} '$3' ) 

endsnippet

snippet s-or

OR ( $1 ) 

endsnippet

snippet s-o

ORDER BY `$1`${2: DESC}

endsnippet

snippet s-union

(
  $1
) UNION (
  $2
)

endsnippet

snippet s-w

WHERE ( `$1` ${2:=} '$3' ) 

endsnippet

snippet s-scount

SELECT COUNT(${1:*}) FROM `$2` AS `${2/(.).*/$1/}`

endsnippet

snippet s-sinline

SELECT `${3/(.).*/$1/}`.$1 FROM `$3` AS `${3/(.).*/$1/}`

endsnippet

snippet s-smax

SELECT MAX(${1:id}) FROM `$2` AS `${2/(.).*/$1/}`

endsnippet

snippet s-smin

SELECT MIN(${1:id}) FROM `$2` AS `${2/(.).*/$1/}`

endsnippet

snippet s-sone

${5:SELECT
  *
FROM `$1`
WHERE `${2:id}` ${3:=} '$4';
}

endsnippet

snippet s-ss "(select '...';)"

SELECT '${1:My String}';

endsnippet

snippet s-sv "(select `...`;)"

SELECT `${1:var_name}`;

endsnippet

snippet s-s

SELECT
    `${4:${3/(.).*/$1/}}`.${1:*}
  FROM `$3` AS `${4:${3/(.).*/$1/}}`

endsnippet

snippet s-hcols "(show columns)"

${2:SHOW FULL COLUMNS FROM `${1:table}`;}

endsnippet

snippet s-hcreate "(show create signature)"

${2:SHOW CREATE TABLE `${1:table}`;}

endsnippet

snippet s-hidx "(show indexes)"

${2:SHOW INDEX FROM `${1:table}`;}

endsnippet

snippet s-hrel "(show relations table)"

${0:SELECT CONCAT(
	`constraint_name`, ' : ',
	`table_name`, '.', `column_name`, ' -> ', 
  `referenced_table_name`, '.', `referenced_column_name`
) AS `relations_list`
FROM `information_schema`.`key_column_usage`
WHERE `table_schema` = ${1:DATABASE()}
	AND `table_name` = '${2:table_name}'
  AND `referenced_table_name` IS NOT NULL;
}

endsnippet

snippet s--fk

INDEX `fk_$1_$3_idx` (`$2` ASC),
CONSTRAINT `fk_${1:the_table}_$3`
  FOREIGN KEY (`${2:foreign_key}`)
  REFERENCES `${3:far_table}` (`${4:far_key}`)
  ON DELETE NO ACTION
  ON UPDATE CASCADE

endsnippet

snippet s-fk

CONSTRAINT `fk_${1:the_table}_$3`
  FOREIGN KEY (`${2:foreign_key}`)
  REFERENCES `${3:far_table}` (`${4:far_key}`)
  ON DELETE NO ACTION
  ON UPDATE CASCADE

endsnippet

snippet s-idx-txt

FULLTEXT INDEX `$1_idx` (`${1:column}` ASC$2)${3:,
}

endsnippet

snippet s-idx

INDEX `$1_idx` (`${1:email}` ASC$2)${3:,
}

endsnippet

snippet s-many-many

CREATE INDEX `$4_idx` ON `$1` (`$4` ASC);
CREATE INDEX `$5_idx` ON `$2` (`$5` ASC);

CREATE TABLE IF NOT EXISTS `${3:$1_$2}` (
  `${1:table1}_${4:id}` INT UNSIGNED NOT NULL,
  `${2:table2}_${5:id}` INT UNSIGNED NOT NULL,

  PRIMARY KEY (`$1_$4`, `$2_$5`),
  INDEX `fk_$3_$1_$4_idx` (`$1_$4` ASC),
  INDEX `fk_$3_$2_$5_idx` (`$2_$5` ASC),

  CONSTRAINT `fk_$3_$1`
    FOREIGN KEY (`$1_$4`)
    REFERENCES `$1` (`$4`)
    ON DELETE ${6:NO ACTION}
    ON UPDATE CASCADE,

  CONSTRAINT `fk_$3_$2`
    FOREIGN KEY (`$2_$5`)
    REFERENCES `$2` (`$5`)
    ON DELETE $6
    ON UPDATE CASCADE
) ENGINE = InnoDB;

endsnippet

snippet s-pk

PRIMARY KEY `pk_${1:id}`(`$1`)${2:,
}

endsnippet

snippet s-table-drop

DROP TABLE IF EXISTS `$1`;

endsnippet

snippet s--table

DROP TABLE IF EXISTS `${1:table_name}`;
CREATE TABLE `$1` (
  `${2:id}` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `${3:name}` ${4:VARCHAR(255)},
  PRIMARY KEY `pk_$2`(`$2`)
) ENGINE = InnoDB;

endsnippet

snippet s--table-tmp

DROP TABLE IF EXISTS `${1:table_name}`;
CREATE TEMPORARY TABLE IF NOT EXISTS `${1:table_name}` (
  `${2:id}` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `${3:name}` ${4:VARCHAR(255)},
  PRIMARY KEY `pk_$2`(`$2`)
) ENGINE = MEMORY;

endsnippet

snippet s-table-tmp

CREATE TEMPORARY TABLE IF NOT EXISTS `${1:table_name}` (
  `${2:id}` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `${3:name}` ${4:VARCHAR(255)},
  PRIMARY KEY `pk_$2`(`$2`)
) ENGINE = MEMORY;

endsnippet

snippet s-table

CREATE TABLE IF NOT EXISTS `${1:table_name}` (
  `${2:id}` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `${3:name}` ${4:VARCHAR(255)},
  PRIMARY KEY `pk_$2`(`$2`)
) ENGINE = InnoDB;

endsnippet

snippet s-uk

UNIQUE KEY `unique_${1:id}`(`$1`$2)${3:,
}

endsnippet

snippet s-trig-drop

DROP TRIGGER IF EXISTS `${1:name}`;

endsnippet

snippet s--trig-list

SHOW TRIGGERS FROM `${1:full_db_name}` LIKE '${2:table_name}%'\G

endsnippet

snippet s-trig-list

SHOW TRIGGERS LIKE '${2:table_name}%'\G

endsnippet

snippet s--trig

DROP TRIGGER IF EXISTS `${1:trigger_name}`;
CREATE TRIGGER `${1}` ${2:AFTER} ${3:INSERT} ON `${4:table_name}` FOR EACH ROW
BEGIN
    ${5: -- Use NEW and OLD constants for access to row}
END;

endsnippet

snippet s-trig

CREATE TRIGGER `${1:trigger_name}` ${2:AFTER} ${3:INSERT} ON `${4:table_name}` FOR EACH ROW
BEGIN
    ${5: -- Use NEW and OLD constants for access to row}
END;

endsnippet

snippet s-u

UPDATE `${1:table}` SET
  `$2` = '$3'${4:,}
WHERE `$5` = '$6';

endsnippet

snippet s-user-add-hash "(new user, hashed password)"

CREATE USER '${1:username}'@'${2:localhost}' IDENTIFIED BY PASSWORD '*832EB84CB764129D05D498ED9CA7E5CE9B8F83EB';

endsnippet

snippet s--user-add "(new user, password)"

CREATE USER '${1:username}'@'${2:localhost}' IDENTIFIED BY '${3:password}';

endsnippet

snippet s-user-add "(new user)"

CREATE USER '${1:username}'@'${2:localhost}';

endsnippet

snippet s-user-drop "(drop user)"

DROP USER '${1:username}'@'${2:localhost}';

endsnippet

snippet s-user-list "(list users)"

SELECT `user`, `host`, `password` FROM `mysql`.`user`;

endsnippet

snippet s-user-pwd "(change user password)"

SET PASSWORD ${1:FOR '${2:username}'@'${3:localhost}'} = PASSWORD('${4:password}');

endsnippet
